/**
 * Copyright 2010 Andrey Medvedev. All rights reserved.
 */
package tests.common.utils;

import java.util.List;
import java.io.IOException;
import java.io.Writer;

import com.exametrika.common.utils.Template;

/**
 * The {@link TestTemplate} represent a test template.
 * 
 * @author medvedev
 */
public class TestTemplate extends Template
{
    public static class Interface
    {
        public final String name;
        public final String modifier;
        public final String comment;
        public final List<String> superInterfaces;
        public final List<Method> methods;
        
        public Interface(String name, String modifier, String comment, 
            List<String> superInterfaces, List<Method> methods)
        {
            this.name = name;
            this.modifier = modifier;
            this.comment = comment;
            this.superInterfaces = superInterfaces;
            this.methods = methods;
        }
    }
    
    public static class Method
    {
        public final String name;
        public final String modifier;
        public final String resultType;
        public final String comment;
        public final List<Parameter> parameters;
        
        public Method(String name, String modifier, String resultType, String comment, 
            List<Parameter> parameters)
        {
            this.name = name;
            this.modifier = modifier;
            this.resultType = resultType;
            this.comment = comment;
            this.parameters = parameters;
        }
    }
    
    public static class Parameter
    {
        public final String name;
        public final String type;
        
        public Parameter(String name, String type)
        {
            this.name = name;
            this.type = type;
        }
        
        @Override
        public String toString()
        {
            return type + " " + name;
        }
    }
    
    public TestTemplate()
    {
    }
    
    public TestTemplate(Writer writer)
    {
        super(writer);
    }
    
    public void generate(Interface model) throws IOException
    {
        header(model);
        
        boolean first = true;
        for (Method method : model.methods)
        {
        	if (first)
        		first = false;
         	else
         		writer.write('\n');
            methodDeclaration(method);
        }
            
        footer();
    }
    
    private void header(Interface model) throws IOException
    {
        String superInterfaces = delimit(model.superInterfaces, ", ", 4, 120, true);
        //${model.comment}
        writer.write(model.comment + '\n');
        //${model.modifier} interface ${model.name} extends 
        writer.write(model.modifier + " interface " + model.name + " extends " + '\n');
        //${superInterfaces}
        writer.write(superInterfaces + '\n');
        //{
        writer.write("{" + '\n');
    }

    private void methodDeclaration(Method model) throws IOException
    {
        String parameters = delimit(model.parameters, ", ", 4, 120, false);
        //    ${model.comment}
        writer.write("    " + model.comment + '\n');
        //	${model.modifier} ${model.resultType} ${model.name}(${parameters});
        writer.write("	" + model.modifier + " " + model.resultType + " " + model.name + "(" + parameters + ");" + '\n');
    }

    private void footer() throws IOException
    {
        //}
        writer.write("}" + '\n');
    }
}
