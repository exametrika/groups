* тесты
  - IFlushCondition
  - exchange data on flush
  - проверить, что существующие тесты работают
* TotalOrderProtocol, OrderedQueue - сode review
------------
* проверить флаги приоритета и параллельности посылаемых сообщений
* проверить групповые протоколы на потокобезопасность при stop/start. Можно сделать закрытие channel через compartment, чтобы не требовалась синхронизация. По аналогии с gracefull вызывается stop в контексте compartment, проверка на stopped и присваивание stopped = true выполняется до вызова и под синхронизатором, остальные без синхронизации
* LocalSendOptimizationProtocol introduces delays in handling local messages, it is necessary to implement process method in ICompartmentProcessor which is called on each dispatch iteration and move message handling logics into it. How to do it performantly, so only exactly this only protocol gets called, not others
* make GracefullCloseStrategy two phase - request and close phase to consistently close protocols or better make close protocol mechanics based on protocol stop (now some protocols use stop, some - GracefullCloseStrategy, we need single approach)
* прогнать все тесты группы, чтобы работали

* FailureAtomicProtocol - учесть, что StateTransfer Должен быть выше по стеку чем данный протокол
* проблема StateTransferServer.pendingMessages - сейчас используется flow control при переполнении. В тестах он реализован tcp транспортом, в реальной фабрике нужно использовать failure atomic протокол. Кроме того такое решение перекладывает проблему на отправителя. Можно реджектить запросы на переноссостояния если byte rate входящих сообщений запоследние 5 мин больше заданного порога. Можно асинхронно записывать в файл сообщения, а потом проигрывать асинхронно пачками, чтобы дать возможность и другим протоколам параллельно поработать.

Масштабное тестирование:
* По окончании разработки failure atomic протоколов провести масштабное ручное тестирование, моделирующее образование группы, вход/сбой/выход узлов, перенос большого состояния (требующего время на перенос) при работающей посылке сообщений
* сделать доп. тест, случайным образом срубающий/запускающий узлы и запустить группу в облаке azure
* сделать standalone perf тесты и прогнать их как без сбоев, так и на вышеприведенном тесте
* только после этих тестов и стабилизации core продолжить разработку GMS/worker части
* Расширить StateTransfer Тесты - сделать тесты эмулирующие различные сбои при работе с состояние (reject, fail при загрузке/выгрузке и др.)
--------------
Groups Core:
* data exchange
  - доделать 
  - сделать тесты
* atomic multicast
* канал + фабрика канала + конфигурация
  - Доделать GroupChannelFactory
  - расширить параметры фабрики и канала параметрами групповых протоколов
  - перенести из тестовой фабрики из Flush тестов реализацию
* тесты
  - unit тесты
  - интеграционные и perf inprocess тесты
  - распределенное функциональное и perf тестирование на azure, включая механику имитации сбоев (используя tester)
* доп. сервисы (состав расширяемый)
---------------------
Развитие:
* discovery - multicast, azure/aws discovery
* failure atomic multicast - поддержка pullable посылок