Ошибки:
* MulticastProtocolTests - ассертов нет, но тесты не проходят (кроме первого)

* проанализировать использование FlowControl
  - отдельно для низкоуровневых, отдельно для FailureAtomic
  - блокировка/разблокировка flowControl по всем запчастям(SendQueue,ReceiveQueue, RetransmitProtocol...) должна идти через сам FailureAtomicProtocol с единым счетчиком и блокиратором, но нужно учесть, что не которые блокировки дублированы - возможно блокировать только на начальных этапах обработки сообщения
  - судя по всему нужно делать спец. flowControl протокол для управления нрупповыми рассылками
    * отправитель по каждой группе ведет список ее блокировок от получателей
    * получатель блокирует отправителя при превышении максимального порога размера очереди по этому отправителю и разблокирует при снижении до минимального порога
    * при падении получателя, отправитель снимает его блокировку (если есть)
    * блокировки шлются либо явно по сети, либо на сопутствующих сообщениях (с небольшими задержками - опционально)
    * flowControl failure atomic протокола подключен к flowControl протоколу (не к транспорту), а тот на стороне отправителя к внешнему флоу контроллеру, еслиидет посылка pullable отправителем, она тоже блокируется
    * проблема StateTransferServer.pendingMessages - сейчас используется flow control при переполнении. В тестах он реализован tcp транспортом, в реальной фабрике нужно использовать failure atomic протокол. Кроме того такое решение перекладывает проблему на отправителя. Можно реджектить запросы на переноссостояния если byte rate входящих сообщений запоследние 5 мин больше заданного порога. Можно асинхронно записывать в файл сообщения, а потом проигрывать асинхронно пачками, чтобы дать возможность и другим протоколам параллельно поработать.
* Доделать GroupChannelFactory
    
* тесты
  - доработать мультикаст тесты: 
    * посылка сообщений до коннекта канала
    * проверка pullable отправки
  - проверить, что существующие тесты работают
  - failure atomic multicast unit тесты на базе нашей failure modeling framework
------------
* проверить флаги приоритета и параллельности посылаемых сообщений
* проверить групповые протоколы на потокобезопасность при stop/start. Можно сделать закрытие channel через compartment, чтобы не требовалась синхронизация. По аналогии с gracefull вызывается stop в контексте compartment, проверка на stopped и присваивание stopped = true выполняется до вызова и под синхронизатором, остальные без синхронизации
* LocalSendOptimizationProtocol introduces delays in handling local messages, it is necessary to implement process method in ICompartmentProcessor which is called on each dispatch iteration and move message handling logics into it. How to do it performantly, so only exactly this only protocol gets called, not others
* make GracefullCloseStrategy two phase - request and close phase to consistently close protocols or better make close protocol mechanics based on protocol stop (now some protocols use stop, some - GracefullCloseStrategy, we need single approach)
* прогнать все тесты группы, чтобы работали

Масштабное тестирование:
* По окончании разработки failure atomic протоколов провести масштабное ручное тестирование, моделирующее образование группы, вход/сбой/выход узлов, перенос большого состояния (требующего время на перенос) при работающей посылке сообщений
* сделать доп. тест, случайным образом срубающий/запускающий узлы и запустить группу в облаке azure
* сделать standalone perf тесты и прогнать их как без сбоев, так и на вышеприведенном тесте
* только после этих тестов и стабилизации core продолжить разработку GMS/worker части
* Расширить StateTransfer Тесты - сделать тесты эмулирующие различные сбои при работе с состояние (reject, fail при загрузке/выгрузке и др.)
--------------
Groups Core:
* atomic multicast
* канал + фабрика канала + конфигурация
  - Доделать GroupChannelFactory
  - расширить параметры фабрики и канала параметрами групповых протоколов
  - перенести из тестовой фабрики из Flush тестов реализацию
* тесты
  - unit тесты
  - интеграционные и perf inprocess тесты
  - распределенное функциональное и perf тестирование на azure, включая механику имитации сбоев (используя tester)
* доп. сервисы (состав расширяемый)
---------------------
Развитие:
* discovery - multicast, azure/aws discovery
* failure atomic multicast - поддержка pullable посылок